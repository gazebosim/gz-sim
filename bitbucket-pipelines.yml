image: ubuntu:bionic

pipelines:
  default:
    - step:
        script:
          - apt-get update
          - apt -y install wget lsb-release gnupg sudo curl
          # Enable relevant package repositories
          - docker/scripts/enable_ign_stable.sh
          - docker/scripts/enable_ign_prerelease.sh
          - docker/scripts/enable_ign_nightly.sh
          # Build everything from debians
          - docker/scripts/install_all.sh
          # Build ign-rendering from source using the default branch
          # - docker/scripts/build_ign.sh ignitionrobotics ign-rendering default
          # Ignition Gazebo
          - ./tools/clang_tidy.sh
          - mkdir build
          - cd build
          - cmake .. -DCMAKE_BUILD_TYPE=coverage
          - make -j4 install
          - export IGN_CONFIG_PATH=/usr/local/share/ignition
          # run codecheck before tests so flaky tests don't obscure codecheck failures
          - make codecheck
          - make test ARGS="-VV"
          - make coverage
          # Use a special version of codecov for handling gcc8 output.
          - bash <(curl -s https://raw.githubusercontent.com/codecov/codecov-bash/4678d212cce2078bbaaf5027af0c0dafaad6a095/codecov) -X gcovout -X gcov
  custom:
    benchmark:
      - step:
          script:
            - apt-get update
            - apt -y install wget lsb-release gnupg sudo curl
            # Enable relevant package repositories
            - docker/scripts/enable_ign_stable.sh
            - docker/scripts/enable_ign_prerelease.sh
            - docker/scripts/enable_ign_nightly.sh
            - docker/scripts/install_all.sh
            # Build some Ignition libraries from source.
            # Build ign-rendering from source using the default branch
            # - docker/scripts/build_ign.sh ignitionrobotics ign-rendering default
            # Ignition Gazebo
            - mkdir build
            - cd build
            - cmake ..
            - make -j4 install
            - ./bin/BENCHMARK_each --benchmark_out_format=json --benchmark_out=each.json
            - ../docker/scripts/upload_json_benchmark.sh each.json 
