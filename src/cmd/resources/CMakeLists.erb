#These lines will set minimum required version of cmake and declare the name of the project.
cmake_minimum_required(VERSION 3.10.2 FATAL_ERROR)
project(<%= options['name'] %>)
<% if options['ign_dependecies']==1 %>

#This is a list of general packages on which your ignition package will depend,find_package function will find and source theses packages.
#You can add or delete dependencies based on your requirement.
<% if options['built_type']=='ament_cmake' %>
#Since,the package is amnet dependent we will find and call ament_cmake.

find_package(ament_cmake REQUIRED)
<% end %>

find_package(ignition-cmake<%= dependencies_dict["ign-cmake"]%> REQUIRED)

find_package(ignition-gazebo<%= dependencies_dict["ign-gazebo"]%> REQUIRED COMPONENTS gui)
set(IGN_GAZEBO_VER ${ignition-gazebo<%= dependencies_dict["ign-gazebo"]%>_VERSION_MAJOR})

find_package(ignition-gui<%= dependencies_dict["ign-gui"]%> REQUIRED)
set(IGN_GUI_VER ${ignition-gui<%= dependencies_dict["ign-gui"]%>_VERSION_MAJOR})

find_package(ignition-rendering<%= dependencies_dict["ign-rendering"]%> REQUIRED)
set(IGN_RENDERING_VER ${ignition-rendering<%= dependencies_dict["ign-rendering"]%>_VERSION_MAJOR})

find_package(ignition-sensors<%= dependencies_dict["ign-sensors"]%> REQUIRED)
set(IGN_SENSORS_VER ${ignition-sensors<%= dependencies_dict["ign-sensors"]%>_VERSION_MAJOR})

find_package(ignition-msgs<%= dependencies_dict["ign-msgs"]%> REQUIRED)
set(IGN_MSGS_VER ${ignition-msgs<%= dependencies_dict["ign-msgs"]%>_VERSION_MAJOR})

find_package(ignition-plugin<%= dependencies_dict["ign-plugin"]%> REQUIRED COMPONENTS register)
set(IGN_PLUGIN_VER ${ignition-plugin<%= dependencies_dict["ign-plugin"]%>_VERSION_MAJOR})

find_package(ignition-utils<%= dependencies_dict["ign-utils"]%> REQUIRED)
set(IGN_UTILS_VER ${ignition-utils<%= dependencies_dict["ign-utils"]%>_VERSION_MAJOR})

find_package(ignition-common<%= dependencies_dict["ign-common"]%> REQUIRED COMPONENTS profiler)
set(IGN_COMMON_VER ${ignition-common<%= dependencies_dict["ign-common"]%>_VERSION_MAJOR})
<% end %>
<% if options['init-with-example-system']==1 %>

#These will install directories with various resources like worlds,plugins etc.
ign_add_resources(worlds)
ign_add_resources(models)
ign_export_variable(LD_LIBRARY_PATH @CMAKE_INSTALL_PREFIX@/lib)
ign_add_plugins(plugins COMMON_PUBLIC_LIBRARIES 
 ignition-gazebo${IGN_GAZEBO_VER}::ignition-gazebo${IGN_GAZEBO_VER}
 ignition-common${IGN_COMMON_VER}::ignition-common${IGN_COMMON_VER}
 ignition-plugin${IGN_PLUGIN_VER}::ignition-plugin${IGN_PLUGIN_VER})
ign_add_executables(src COMMON_PUBLIC_LIBRARIES 
ignition-msgs${IGN_MSGS_VER}::ignition-msgs${IGN_MSGS_VER})

#This line will export paths of all the above mentioned resources.
<% if options['export_type']=="colcon"%>
ign_environment_hook(colcon)
<% end %>
<% if options['export_type']=="plain_cmake"%>
ign_environment_hook(plain-cmake)
<% end %>
<% end %>

#These line will run tests for the package, if build testing is set to be TRUE
#You can add your tests here

if(BUILD_TESTING)

<% if options['built_type']=='ament_cmake' %>
find_package(ament_cmake_gtest REQUIRED)
<% end %>
set("PROJECT_BINARY_PATH" ${CMAKE_CURRENT_BINARY_DIR})
set("PROJECT_SOURCE_PATH" ${CMAKE_CURRENT_SOURCE_DIR})

endif()
<% if options['built_type']=='ament_cmake' %>

#The project setup is done by ament_package().
#It installs the package.xml, registers the package with the ament index, and installs config (and possibly target) files
#for CMake so that it can be found by other packages using find_package.
ament_package()
<% end %>
